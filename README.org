#+TITLE: My Emacs Config
#+AUTHOR: Shimmy Xu

* Introduction
This is my humble collection of Emacs config, modeled after [[https://github.com/admiralakber/simplemacs][simplemacs]], documented in an hopefully understandable manner. I went from using multiple =.org= files back to a single one because =org-mode= is just fantastic and my config is not too complicated for a single file to handle (yet).

After installation, you may need to run =M-x list-packages= and reload =init.el=.

** Module Descriptions
Here's a short description for each module.
| Module             | Notes                       |
|--------------------+-----------------------------|
| [[Packages]]           | Package management.         |
| [[Aesthetics]]         | UI and theme.               |
| [[Org-mode]]           | Org-mode settings.          |
| [[Helm]]               | Minibuffer auto-completion. |
| [[Auctex]]             | Latex settings.             |
| [[Ox-hugo]]            | =hugo= exporter.            |
| [[Magit]]              | Git interface.              |
| [[CC]]                 | CC mode.                    |
| [[Flycheck]]           | Syntax checking.            |
| [[Yasnippet]]          | Snippet templates.          |
| [[Company]]            | Buffer auto-completion.     |

* Packages
Manage my package settings.

** Package Repositories
Initialize Emacs Package Manager and add repositories (only melpa for now).

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (url (concat (if no-ssl "http" "https") "://melpa.org/packages/")))
        (add-to-list 'package-archives (cons "melpa" url) t))
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
#+END_SRC

** Setup =use-package=
Setup =use-package= so that package requirements can be handled in separate
sections.

#+BEGIN_SRC emacs-lisp
  ;; Bootstrap `use-package'
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

* Aesthetics
Mostly aesthetics and quality of life changes.

** Color Themes
Install =base16-theme=.
#+BEGIN_SRC emacs-lisp
  (use-package base16-theme
    :ensure t)
#+END_SRC

Solarized light or monokai.

#+BEGIN_SRC emacs-lisp
  (load-theme 'base16-monokai t)
#+END_SRC

** Customize Settings in Separate File
Save customized settings in a separate file than =init.el=. Create the customization file if none found.
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (unless (file-exists-p custom-file)
    (write-region "" "" custom-file))
  (load custom-file)
#+END_SRC

** Fcitx
Install fcitx support.

#+BEGIN_SRC emacs-lisp
  (use-package fcitx
    :ensure t
    :init
    (fcitx-aggressive-setup)
    (setq fcitx-use-dbus t))
#+END_SRC

** Highlight Lines Over 80
Highlight portions of line over 80 characters in =prog-mode=.
#+BEGIN_SRC emacs-lisp
  (require 'whitespace)
  (setq whitespace-style '(face empty tabs lines-tail trailing))
  (add-hook 'prog-mode-hook 'whitespace-mode)
#+END_SRC

** Line Highlighting
Enable line highlighting.

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC

** Line Numbering
Enable line numbering.

#+BEGIN_SRC emacs-lisp
  (linum-mode)
#+END_SRC

Install relative line numbering support.

#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :init (linum-relative-global-mode))
#+END_SRC

Display current line number instead of 0.

#+BEGIN_SRC emacs-lisp
  (setq linum-relative-current-symbol "")
#+END_SRC

Force width of line numbering bar to 3 digit wide.

#+BEGIN_SRC emacs-lisp
  (setq linum-format "%3d ")
#+END_SRC

** Line Wrapping
Enable line wrapping by default.
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode t)
#+end_SRC

** No Tabs
Use spaces for indenting.
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Parenthesis Highlighting
Highlight matching parenthesis.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC

** Rainbow Delimiters
=rainbow-delimiters= is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth.

Install =rainbow-delimiters= and enable it for =prog-mode=.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** Remove Trailing Whitespace
Remove trailing whitespace upon saving.
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Save Backups Elsewhere
Save =*~= backups in =$(pwd)/.bak=.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        '(("." . ".bak"))
        )
#+END_SRC

** UI Settings
Hide menu, scrollbar and toolbars.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
#+END_SRC

Remove scrollbar for any new frames as well, useful for =emacsclient=.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(vertical-scroll-bars . nil))
#+END_SRC

Fills up gap in the border when tiling emacs to half-screen.

#+BEGIN_SRC emacs-lisp
(setq frame-resize-pixelwise t)
#+END_SRC

Use Source Code Pro as the default font.

#+BEGIN_SRC emacs-lisp
  (setq default-frame-alist '((font . "Source Code Pro-12")))
#+END_SRC

* Org-mode
Mostly formatting settings in =org-mode=.

** Set Link Format
Do not collapse the links.
#+BEGIN_SRC emacs-lisp
  (org-toggle-link-display)
#+END_SRC

** Subtree Indention
Do not change text indention when promoting/demoting subtrees.
#+BEGIN_SRC emacs-lisp
  (setq org-adapt-indentation nil)
#+END_SRC

** Truncate Lines by Default
Automatically enable truncated lines when starting =org-mode=.
#+BEGIN_SRC emacs-lisp
  (setq-default org-startup-truncated t)
#+END_SRC

** Turn Off =auto-fill=
Disable =auto-fill-mode= when in =org-mode=.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'turn-off-auto-fill)
#+END_SRC

** Enable spell checking
Spell checking with =flyspell-mode=. Would need to install dictionary lib like =aspell= in base system.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

* Helm
Stolen from Admiral Akber's config.

** Info
Helm is incredible, it really supercharges emacs. It's a framework for
incremental searching / completion / narrowing down options. Sounds
simple, and it is in application, and it's so worth it.

Web: [[https://emacs-helm.github.io/helm/]]
Git: [[https://github.com/emacs-helm/helm]]

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :init (helm-mode t))
  (require 'helm-config)
#+END_SRC

** Visual customization
I want helm to automatically resize and appear in the current buffer
only.

#+BEGIN_SRC emacs-lisp
  (setq helm-autoresize-mode 1)
  (setq helm-split-window-in-side-p t)
#+END_SRC

** Fuzzy matching
Fuzzy matching works most of the time, it does seem to have the issue
of only matching forward i.e. "machine snow" will not match with "snow
machine".

It does make it a lot easier to search through emacs functions though
as you only need to remember one part of the function name.

#+BEGIN_SRC emacs-lisp
  ;; Enable Fuzzy Matching
  (setq helm-recentf-fuzzy-match       t
        helm-buffers-fuzzy-matching    t
        helm-recentf-fuzzy-match       t
        helm-buffers-fuzzy-matching    t
        helm-locate-fuzzy-match        t
        helm-apropos-fuzzy-match       t
        helm-lisp-fuzzy-completion     t
        helm-candidate-number-limit    100)
#+END_SRC

** Keybindings
Above defaults overides such as =M-x= these are custom bindings.

*** Self help
The emacs culture is to have great documentation with your functions,
all searchable via =apropos=. Helm provides a nice interface to this,
use it often.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-h a") 'helm-apropos)
  (global-set-key (kbd "C-h i") 'helm-info-emacs)
#+END_SRC

*** Buffers and files
Buffers and files are an obvious case where helm is very useful.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b")   'helm-mini)
  (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
  (global-set-key (kbd "M-x")     'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x C-r") 'helm-recentf)
  (global-set-key (kbd "C-x r l") 'helm-filtered-bookmarks)
#+END_SRC

*** Advanced editing
Kill ring memory, grepping, etc, all gorgeous with helm.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-y")     'helm-show-kill-ring)
  (global-set-key (kbd "C-x c g") 'helm-do-grep)
  (global-set-key (kbd "C-x c o") 'helm-occur)
#+END_SRC

*** The overloaded tab key
The good ol' =TAB= key is used for a lot, in this case I want to make
sure that when used in helm that it completes in helm, not attempting
to insert a snippet or something.

#+BEGIN_SRC emacs-lisp
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
#+END_SRC

Also, the following makes sure that tab works when running in terminal
mode:

#+BEGIN_SRC emacs-lisp
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
#+END_SRC

This requires fixing the select other actions which IIRC is set to
~C-i~ by default.

#+BEGIN_SRC emacs-lisp
  (define-key helm-map (kbd "C-z") 'helm-select-action)
#+END_SRC

* Auctex
=auctex= is an extensible package for writing and formatting TEX files in GNU Emacs.

** Installation
Need to use =defer= as =auctex.el= does not actually provide =auctex= feature.
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :defer t
    :ensure t)
#+END_SRC

** Automatic Parsing
Enable =auctex= to automatically parse buffer information.
#+BEGIN_SRC emacs-lisp
  (setq TeX-parse-self t)
  (setq TeX-auto-save t)
  (setq TeX-save-query nil)
#+END_SRC

** Master File Detection
Let =auctex= figure out the master file for TeX document spread over many files.
#+BEGIN_SRC emacs-lisp
  (setq-default TeX-master nil)
#+END_SRC

** Spell Checking
Spell checking with =flyspell=.
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
#+END_SRC

** Enable =reftex=
Turn on RefTeX Mode for all LaTeX files. This enables you to jump via table of contents.
The key to invoke this is ~C-c =~.
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
#+END_SRC

** Enable =LaTeX-math-mode=
Enable LaTeX Math mode. This allows macro insertion following ~`~.
Not exactly useful since we already have =company=.
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
#+END_SRC

*** Auto-complete Sub/Superscripts
Insert braces after ~_~ or ~^~.
#+BEGIN_SRC emacs-lisp
  (setq TeX-electric-sub-and-superscript 1)
#+END_SRC

* Ox-hugo
Exporter from =org-mode= to =hugo=.

** Installation
Enable =ox-hugo= as an option for exporting.

#+BEGIN_SRC emacs-lisp
  (use-package ox-hugo
    :ensure t
    :init (with-eval-after-load 'ox (require 'ox-hugo)))
#+END_SRC

** Auto Set Export Parameters
Auto sets export parameters when using =org-capture=.
#+BEGIN_SRC
(with-eval-after-load 'org-capture
  (defun org-hugo-new-subtree-post-capture-template ()
    "Returns `org-capture' template string for new Hugo post.
See `org-capture-templates' for more information."
    (let* (;; http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/
           (date (format-time-string (org-time-stamp-format :long :inactive) (org-current-time)))
           (title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
           (fname (org-hugo-slug title)))
      (mapconcat #'identity
                 `(
                   ,(concat "* TODO " title)
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_FILE_NAME: " fname)
                   ,(concat ":EXPORT_DATE: " date) ;Enter current date and time
                   ":END:"
                   "%?\n")          ;Place the cursor here finally
                 "\n")))

  (add-to-list 'org-capture-templates
               '("h"                ;`org-capture' binding + h
                 "Hugo post"
                 entry
                 ;; It is assumed that below file is present in `org-directory'
                 ;; and that it has a "Blog Ideas" heading. It can even be a
                 ;; symlink pointing to the actual location of all-posts.org!
                 (file+olp "all-posts.org" "Blog Ideas")
                 (function org-hugo-new-subtree-post-capture-template))))
#+END_SRC

* Magit
Great git interface.
** Installation
Install =magit=.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

** Key Binding
Set hot key for =magit-status=.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c g") 'magit-status)
#+END_SRC
* CC
** Default Indention
Set default indention level to 4 and style to "linux"(do not indent braces).
#+BEGIN_SRC emacs-lisp
  (setq-default c-default-style "linux"
                c-basic-offset 4)
#+END_SRC

* Flycheck
Flycheck is a modern on-the-fly syntax checking extension for GNU
Emacs, intended as replacement for the older Flymake extension which
is part of GNU Emacs.

** Installation
Install =flycheck=.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC

** Set C++ Standard Library
Use =c++14= as the C++ standard.
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook
            (lambda () ((setq flycheck-clang-language-standard "c++14")
                        (setq flycheck-gcc-language-standard "c++14"))))
#+END_SRC

* Yasnippet
YASnippet is a template system for Emacs. It allows you to type an
abbreviation and automatically expand it into function templates.

** Installation
Install =yasnippet=. Load =yasnippet= when =yas-minor-mode= is called
and add the hook for =yas-minor-mode= for programming modes. Reload
the snippets on start up.

#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (use-package yasnippet
    :ensure t
    :commands (yas-minor-mode)
    :init (yas-global-mode)
    :config (yas-reload-all))
#+END_SRC

** Install =yasnippet-snippets=
=yasnippet-snippets= is a collection of snippets for many langulages.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC

* Company
Auto completion of everything with nice backends.

** Installation
Install =company= and enable it globally.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init (global-company-mode))
#+END_SRC

** Adjust Delay
Set delay for auto-completion. 0 would be too extreme and wastes CPU clocks apparently.
#+BEGIN_SRC emacs-lisp
  (setq company-idle-delay 0.01)
  (setq company-minimum-prefix-length 1)
#+END_SRC

** =yasnippet= Conflict
Pressing tab with company mode conflicts with =yasnippets=, this is
the only fix that I found that makes everything work as expected.

#+BEGIN_SRC emacs-lisp
  (defun check-expansion ()
    (save-excursion
      (if (looking-at "\\_>") t
        (backward-char 1)
        (if (looking-at "\\.") t
          (backward-char 1)
          (if (looking-at "->") t nil)))))

  (defun do-yas-expand ()
    (let ((yas/fallback-behavior 'return-nil))
      (yas/expand)))

  (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
        (minibuffer-complete)
      (if (or (not yas/minor-mode)
              (null (do-yas-expand)))
          (if (check-expansion)
              (company-complete-common)
            (indent-for-tab-command)))))


  (global-set-key [tab] 'tab-indent-or-complete)
#+END_SRC

** Removing =company-semantic= backend
So, =cedet= has this thing called =semantic=, which sounds great and
seems really clever, but it's slow. Usually using a backend specific
for the language you're using provides more satisfying results.

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'company
    '(setq company-backends (delete 'company-semantic company-backends)))
#+END_SRC
** Tooltip Documentation
Install dependency =pos-tip=.
#+BEGIN_SRC emacs-lisp
  (use-package pos-tip
    :ensure t)
  (require 'pos-tip)
#+END_SRC

Install =company-quickhelp= and set delay, FG/BG colors, max lines.
#+BEGIN_SRC emacs-lisp
  (use-package company-quickhelp
    :ensure t
    :init (company-quickhelp-mode 1))
  (setq company-quickhelp-delay 0.01)
  (setq company-quickhelp-color-background "#272822")
  (setq company-quickhelp-color-foreground "#F8F8F2")
  (setq company-quickhelp-max-lines 20)
  (setq company-quickhelp-use-propertized-text 1)
#+END_SRC
** Backend Configurations
*** =company-math=
Install =company-math= and add it to =company-backends=.
#+BEGIN_SRC emacs-lisp
  (use-package company-math
    :ensure t
    :init (add-to-list 'company-backends
                       '(company-math-symbols-latex
                         company-math-symbols-unicode)))
#+END_SRC

*** =company-auctex=
Install =company-auctex= and add it to =company-backends=. This is for =acutex= macro completion.
Adding backends is handled by =company-auctex-init=.
#+BEGIN_SRC emacs-lisp
    (use-package company-auctex
      :ensure t
      :init (company-auctex-init))
#+END_SRC
*** =company-yasnippet=
Add =company-yasnippet= backend for =yasnippet= key completion.
Keep this at the end to enable this for all backends.
#+BEGIN_SRC emacs-lisp
  ;; Add yasnippet support for all company backends
  ;; https://github.com/syl20bnr/spacemacs/pull/179
  (defvar company-mode/enable-yas t
    "Enable yasnippet for all backends.")

  (defun company-mode/backend-with-yas (backend)
    (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
#+END_SRC
