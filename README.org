#+TITLE: My Emacs Config
#+AUTHOR: Shimmy Xu
#+TODO: DISABLED(t) | ENABLED(d)
#+PROPERTY: header-args :results none

This is my humble collection of Emacs config, modeled after
[[https://github.com/admiralakber/simplemacs][simplemacs]], documented
in an hopefully understandable manner. I went from using multiple
=.org= files back to a single one because =org-mode= is fantastic and
my config is not too complicated for a single file to handle (yet).

| Module        | Function                     |
|---------------+------------------------------|
| [[Packages]]      | Package management.          |
| [[Aesthetics]]    | UI and theme.                |
| [[Plugins]]       | Larger scale packages.       |
| [[Mode Specific]] | Settings specific to a mode. |
| [[Enhancements]]  | Plug-and-play enhancements.  |

* Packages
Manage my package settings.

** Package Repositories
Initialize Emacs Package Manager and add repositories.
#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (url (concat (if no-ssl "http" "https") "://melpa.org/packages/")))
        (add-to-list 'package-archives (cons "melpa" url) t))
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
#+END_SRC

** Setup =use-package=
Bootstrap =use-package= so that package requirements can be handled in separate
sections.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

* Aesthetics
Mostly aesthetics and quality of life changes.

** 80 Character Limit
Set =fill-column= to 80 characters.
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
#+END_SRC

Highlight portions of line over 80 characters in =prog-mode=.
#+BEGIN_SRC emacs-lisp
  (require 'whitespace)
  (setq whitespace-line-column 80)
  (setq whitespace-style '(face empty tabs lines-tail trailing))
  (add-hook 'prog-mode-hook 'whitespace-mode)
#+END_SRC

** Auto Detect File Changes
Enable auto revert mode to auto-refresh when files have changed on disk.
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

** Color Themes
Install =base16-theme= and enable gruvbox dark pale.
#+BEGIN_SRC emacs-lisp
    (use-package base16-theme
      :ensure t
      :config
      (load-theme 'base16-gruvbox-dark-pale t))
#+END_SRC

** Customize Settings in Separate File
Save customized settings in a separate file than =init.el=. Create the customization file if none found.
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (unless (file-exists-p custom-file)
    (write-region "" "" custom-file))
  (load custom-file)
#+END_SRC

** Fcitx
Install fcitx support.
#+BEGIN_SRC emacs-lisp
  (use-package fcitx
    :ensure t
    :init
    (fcitx-aggressive-setup)
    (setq fcitx-use-dbus t))
#+END_SRC

*** Daemon Support
If using Emacs daemon with =systemd=, remember to add to the
=.service= file:

#+BEGIN_SRC sh
  Environment="LC_CTYPE=zh_CN.UTF-8" "XMODIFIERS=@im=fcitx"
#+END_SRC

It would also help to change the default command for =emacs= into:
#+BEGIN_SRC sh
  emacsclient -c -a emacs
#+END_SRC

** Font Settings
*** Default Fonts
Specify font settings.
#+BEGIN_SRC emacs-lisp
  (defvar user/cjk-font "Noto Sans CJK SC"
    "Default font for CJK characters.")

  (defvar user/latin-font "Iosevka Term SS09"
    "Default font for Latin characters.")

  (defvar user/unicode-font "Symbola"
    "Default font for Unicode characters, including emojis.")

  (defvar user/font-size 17
    "Default font size in px.")

  (defvar user/standard-fontset
    (create-fontset-from-fontset-spec standard-fontset-spec)
    "Standard fontset for user.")

  ;; Ensure user/standard-fontset gets used for new frames.
  (add-to-list 'default-frame-alist (cons 'font user/standard-fontset))
  (add-to-list 'initial-frame-alist (cons 'font user/standard-fontset))
#+END_SRC

*** CJK Font Scaling
Ensure CJK fonts scales correctly to twice the width of mono-space half-width
characters. I tried to add something similar for Unicode fonts, but found that
they don't have uniform width anyways (not to mention that not all of them are
full-width), rendering this method useless.

I think CJK fonts have less granular sizing controls, i.e. the actual glyph size
of size 16 and size 17 are in fact the same and only starts actually increasing
after we hit size 18.

#+BEGIN_SRC emacs-lisp
  (defvar user/cjk-font-scale
    '((16 . 1.0)
      (17 . 1.1)
      (18 . 1.0))
    "Scaling factor to use for cjk font of given size.")

  ;; Specify scaling factor for CJK font.
  (setq face-font-rescale-alist
        (list (cons user/cjk-font
                    (cdr (assoc user/font-size user/cjk-font-scale)))))
#+END_SRC

*** Fontset with CJK and Unicode Fallback
To ensure fontset gets correctly configured, I simply created one from
scratch. This is because =emacsclient= seems to have a different dynamic when
creating =startup-fontset= and no other method guarantees consistent behavior
between =emacs= and =emacsclient=.

Use ~C-u C-x =~ to examine the font used for a specific character and use
=describe-fontset= to check if our changes went through.

#+BEGIN_SRC emacs-lisp
  ;; Enable font customization for charset 'symbols, which contains puncuation
  ;; marks, emoji, etc.
  (setq use-default-font-for-symbols nil)

  (defun user/set-font ()
    "Set Unicode, Latin and CJK font for user/standard-fontset."
    ;; Unicode font.
    (set-fontset-font user/standard-fontset 'unicode
                      (font-spec :family user/unicode-font)
                      nil 'prepend)
    ;; Latin font.
    ;; Only specify size here to allow text-scale-adjust work on other fonts.
    (set-fontset-font user/standard-fontset 'latin
                      (font-spec :family user/latin-font :size user/font-size)
                      nil 'prepend)
    ;; CJK font.
    (dolist (charset '(kana han cjk-misc hangul kanbun bopomofo))
      (set-fontset-font user/standard-fontset charset
                        (font-spec :family user/cjk-font)
                        nil 'prepend))
    ;; Special settings for certain CJK puncuation marks.
    ;; These are full-width characters but by default uses half-width glyphs.
    (dolist (charset '((#x2018 . #x2019)    ;; Curly single quotes "‘’"
                       (#x201c . #x201d)))  ;; Curly double quotes "“”"
      (set-fontset-font user/standard-fontset charset
                        (font-spec :family user/cjk-font)
                        nil 'prepend)))

  ;; Apply changes.
  (user/set-font)
  ;; For emacsclient.
  (add-hook 'before-make-frame-hook #'user/set-font)
#+END_SRC

** Line Highlighting
Enable line highlighting.
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC

** Line Numbering
Use =display-line-numbers= instead of =linum=.
Enable relative line numbering, and set minimum width to 3.
#+BEGIN_SRC emacs-lisp
  (setq-default display-line-numbers-type (quote relative))
  (setq-default display-line-numbers-width 3)
  (global-display-line-numbers-mode)
#+END_SRC

** Line Wrapping
Enable line wrapping by default.
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode t)
#+end_SRC

** No Tabs
Use spaces for indenting.
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

For those that uses tab, set width to 4.
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

** Parenthesis Highlighting
Highlight matching parenthesis.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC

** Rainbow Delimiters
=rainbow-delimiters= is a "rainbow parentheses"-like mode which highlights delimiters such as parentheses, brackets or braces according to their depth.

Install =rainbow-delimiters= and enable it for =prog-mode=.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** Remove Trailing Whitespace
Remove trailing whitespace upon saving.
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Save Backups Elsewhere
Save =*~= backups in =$(pwd)/.bak=.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        '(("." . ".bak"))
        )
#+END_SRC

** Show Column Number
#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
#+END_SRC

** DISABLED Smooth Scrolling
*** DISABLED Sublimity
#+BEGIN_SRC emacs-lisp
  (use-package sublimity
    :ensure t
    :config
    (require 'sublimity-scroll)
    (require 'sublimity-map)
    (sublimity-global-mode))
#+END_SRC

*** Smooth
#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling
    :ensure t
    :config (smooth-scrolling-mode 1))
#+END_SRC

** UI Settings
*** *bars
Hide menu, scrollbar and toolbars.
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

**** New Frame Scrollbar
Remove scrollbar for any new frames as well, useful for =emacsclient=.
#+BEGIN_SRC emacs-lisp
  (defun user/disable-scroll-bars (frame)
    (modify-frame-parameters frame
                             '((vertical-scroll-bars . nil)
                               (horizontal-scroll-bars . nil))))
  (add-hook 'after-make-frame-functions 'user/disable-scroll-bars)
#+END_SRC

*** Half screen fix
Fills up gap in the border when tiling Emacs to half-screen.
#+BEGIN_SRC emacs-lisp
  (setq frame-resize-pixelwise t)
#+END_SRC

** Zoom In
Use mouse wheel to adjust zoom level.
#+BEGIN_SRC emacs-lisp
  (global-set-key [C-mouse-4] 'text-scale-increase)
  (global-set-key [C-mouse-5] 'text-scale-decrease)
#+END_SRC

* Plugins
Larger scale packages that either requires more configuration, or
fundamentally changes how Emacs behave. Because these package
configurations is a lot more complex and may be spread out, any
subtree that depends on packages in this section will have a tag to
mark the dependency.

** Ivy
Flexible, simple tools for minibuffer completion in Emacs.

Ivy, a generic completion mechanism for Emacs.
Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
Swiper, an Ivy-enhanced alternative to isearch.

*** Installation
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :init
    (setq enable-recursive-minibuffers t)
    (ivy-mode 1)
    :config
    ;; Show recents and bookmarks in find-file.
    (setq ivy-use-virtual-buffers t)
    ;; Use Enter to navigate into the directory, not open it with dired.
    (define-key ivy-minibuffer-map (kbd "C-m") 'ivy-alt-done)
    ;; Use C-l to go back one level.
    (define-key ivy-minibuffer-map (kbd "C-l") 'ivy-backward-delete-char)
    :bind
    (("C-c C-r" . ivy-resume)))
  (use-package counsel
    :ensure t
    :bind
    (("M-x"     . counsel-M-x)
     ("M-y"     . counsel-yank-pop)
     ("C-c c f" . counsel-git)
     ("C-c c s" . counsel-git-grep)
     ("C-x C-f" . counsel-find-file)
     ("C-x r b" . counsel-bookmark)
     ("C-h a"   . counsel-apropos)
     ("C-h f"   . counsel-describe-function)
     ("C-h v"   . counsel-describe-variable)
     ("C-h l"   . counsel-find-library)
     ("C-h b"   . counsel-descbinds)
     ("C-h i"   . counsel-info-lookup-symbol)
     ("<f2> u"  . counsel-unicode-char)))
  (use-package swiper
    :ensure t
    :bind
    (("C-s"     . swiper)))
#+END_SRC

*** Integration
Integration with =magit= and =projectile=.
#+BEGIN_SRC emacs-lisp
  (setq magit-completing-read-function 'ivy-completing-read)
  (setq projectile-completion-system 'ivy)
#+END_SRC

** DISABLED Helm
Stolen from Admiral Akber's config.

*** Install
Helm is incredible, it really supercharges emacs. It's a framework for
incremental searching / completion / narrowing down options. Sounds
simple, and it is in application, and it's so worth it.

Web: [[https://emacs-helm.github.io/helm/]]
Git: [[https://github.com/emacs-helm/helm]]
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :init (helm-mode t))
  (require 'helm-config)
#+END_SRC

*** Visual customization
I want helm to automatically resize and appear in the current buffer
only.
#+BEGIN_SRC emacs-lisp
  (setq helm-autoresize-mode 1)
  (setq helm-split-window-in-side-p t)
#+END_SRC

*** Fuzzy matching
Fuzzy matching works most of the time, it does seem to have the issue
of only matching forward i.e. "machine snow" will not match with "snow
machine".

It does make it a lot easier to search through Emacs functions though
as you only need to remember one part of the function name.
#+BEGIN_SRC emacs-lisp
  ;; Enable Fuzzy Matching
  (setq helm-recentf-fuzzy-match       t
        helm-buffers-fuzzy-matching    t
        helm-recentf-fuzzy-match       t
        helm-buffers-fuzzy-matching    t
        helm-locate-fuzzy-match        t
        helm-apropos-fuzzy-match       t
        helm-lisp-fuzzy-completion     t
        helm-candidate-number-limit    250)
#+END_SRC

*** Keybindings
Above defaults overides such as =M-x= these are custom bindings.

**** Self help
The Emacs culture is to have great documentation with your functions,
all searchable via =apropos=. Helm provides a nice interface to this,
use it often.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-h a") 'helm-apropos)
  (global-set-key (kbd "C-h i") 'helm-info-emacs)
#+END_SRC

**** Buffers and files
Buffers and files are an obvious case where helm is very useful.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b")   'helm-mini)
  (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
  (global-set-key (kbd "M-x")     'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x C-r") 'helm-recentf)
  (global-set-key (kbd "C-x r l") 'helm-filtered-bookmarks)
#+END_SRC

**** Advanced editing
Kill ring memory, grepping, etc, all gorgeous with helm.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-y")     'helm-show-kill-ring)
  (global-set-key (kbd "C-x c g") 'helm-do-grep)
  (global-set-key (kbd "C-x c o") 'helm-occur)
#+END_SRC

**** The overloaded tab key
The good ol' =TAB= key is used for a lot, in this case I want to make
sure that when used in helm that it completes in helm, not attempting
to insert a snippet or something.
#+BEGIN_SRC emacs-lisp
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
#+END_SRC

Also, the following makes sure that tab works when running in terminal
mode:
#+BEGIN_SRC emacs-lisp
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
#+END_SRC

This requires fixing the select other actions which IIRC is set to
~C-i~ by default.
#+BEGIN_SRC emacs-lisp
  (define-key helm-map (kbd "C-z") 'helm-select-action)
#+END_SRC

** Company
Auto completion of everything with nice backends.

*** Installation
Install =company= and enable it globally.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init (global-company-mode))
#+END_SRC

*** Tweaks
**** Adjust Delay
Set delay for auto-completion. 0 would be too extreme and wastes CPU clocks apparently.
#+BEGIN_SRC emacs-lisp
  (setq company-idle-delay 0.01)
  (setq company-minimum-prefix-length 2)
#+END_SRC

**** Align Annotation
Flush annotation on candidates to the right.
#+BEGIN_SRC emacs-lisp
  (setq company-tooltip-align-annotations t)
#+END_SRC

*** Tooltip Documentation
Install dependency =pos-tip=.
#+BEGIN_SRC emacs-lisp
  (use-package pos-tip
    :ensure t)
  (require 'pos-tip)
#+END_SRC

Install =company-quickhelp= and set delay, FG/BG colors, max lines.
#+BEGIN_SRC emacs-lisp
  (use-package company-quickhelp
    :ensure t
    :init
    (company-quickhelp-mode t)
    (setq company-quickhelp-delay 0.01)
    (setq company-quickhelp-color-background "#262626")
    (setq company-quickhelp-color-foreground "#ebdbb2")
    (setq company-quickhelp-max-lines 20)
    (setq company-quickhelp-use-propertized-text t))
#+END_SRC

*** Backend Configurations
**** =company-auctex=
Install =company-auctex= and add it to =company-backends=. This is for =acutex= macro completion.
Adding backends is handled by =company-auctex-init=.
#+BEGIN_SRC emacs-lisp
  (use-package company-auctex
    :ensure t
    :init
    (company-auctex-init))
#+END_SRC

***** DISABLED Workaround To Enable Completion in Org Mode
#+BEGIN_SRC emacs-lisp
    :config
    (defun company-auctex-prefix (regexp)
      "Returns the prefix for matching given REGEXP in org-mode and latex-mode."
      (and (or (derived-mode-p 'latex-mode) (derived-mode-p 'org-mode))
           (when (looking-back regexp)
             (match-string-no-properties 1)))))
#+END_SRC

**** DISABLED =company-math=
Install =company-math= and add it to =company-backends=.
***** Unicode Symbols
Enable unicode symbol backend globally.
#+BEGIN_SRC emacs-lisp
  (use-package company-math
    :ensure t)
  ;;  :init (add-to-list 'company-backends
  ;;                     '(company-math-symbols-unicode)))
#+END_SRC

***** Math Symbols
Enable math symbol backend only in =TeX-mode= and =org-mode=.
#+BEGIN_SRC emacs-lisp
  (defun user/company-math-init()
    (setq-local company-backends
                (append '((company-math-symbols-latex
                           ;;company-math-symbols-unicode
                           company-auctex-macros
                           company-auctex-symbols
                           company-auctex-environments))
                        company-backends)))

  (add-hook 'TeX-mode-hook 'user/company-math-init)
  (add-hook 'org-mode-hook 'user/company-math-init)
#+END_SRC
**** =company-anaconda=
Install =company-anaconda= and add it to =company-backends=.
#+BEGIN_SRC emacs-lisp
  (use-package company-anaconda
    :ensure t
    :init (add-to-list 'company-backends
                       'company-anaconda))
#+END_SRC

**** =company-go=
Auto complete for =go=. This relies on =gocode= to be installed using =go get=. Either install from [[https://github.com/mdempsky/gocode][github.com/mdempsky/gocode]] or [[https://github.com/stamblerre/gocode][github.com/stamblerre/gocode]] (supports go-modules).

#+BEGIN_SRC emacs-lisp
  (use-package company-go
    :ensure t
    :init (add-to-list 'company-backends
                       'company-go))
#+END_SRC

**** =company-lsp=
Company completion via =company-lsp=. =lsp-mode= will add the appropriate backend.
#+BEGIN_SRC emacs-lisp
  (use-package company-lsp
    :ensure t)
#+END_SRC

**** =company-yasnippet=
Add =company-yasnippet= backend for =yasnippet= key completion.
#+BEGIN_SRC emacs-lisp
  (defun user/enable-yas-for-backend (backend)
    "Add yasnippet support for specified BACKEND."
    (if (and (listp backend) (member 'company-yasnippet backend))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  ;; Enable for all company backends. Add to hook to prevent missed backends.
  (add-hook 'yas-minor-mode-hook
            (lambda()
              (setq company-backends
                    (mapcar #'user/enable-yas-for-backend company-backends))))
#+END_SRC

*** =yasnippet= Conflict
Pressing tab with company mode conflicts with =yasnippets=, this is the only fix
that I found that makes everything work as expected. Make sure this is placed after backend settings.
#+BEGIN_SRC emacs-lisp
  (defun user/check-expansion()
    (save-excursion
      (if (looking-at "\\_>") t
        (backward-char 1)
        (if (looking-at "\\.") t
          (backward-char 1)
          (if (looking-at "->") t nil)))))

  (defun user/do-yas-expand()
    (let ((yas-fallback-behavior 'return-nil))
      (yas-expand)))

  (defun user/tab-indent-or-complete()
    (interactive)
    (if (minibufferp)
        (minibuffer-complete)
      (if (or (not yas-minor-mode)
              (null (user/do-yas-expand)))
          (if (user/check-expansion)
              (company-complete-common)
            (indent-for-tab-command)))))

  (global-set-key (kbd "TAB") 'user/tab-indent-or-complete)
#+END_SRC

** Flycheck
Flycheck is a modern on-the-fly syntax checking extension for GNU
Emacs, intended as replacement for the older Flymake extension which
is part of GNU Emacs.

*** Installation
Install =flycheck=.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC

*** Set C++ Standard
Use =c++17= as the C++ standard. =cppcheck= only support C++ 14 so far however.
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook
            (lambda () (progn
                         (setq flycheck-cppcheck-standards '("c++14"))
                         (setq flycheck-clang-language-standard "c++17")
                         (setq flycheck-gcc-language-standard "c++17"))))
#+END_SRC

*** Set Google C++ Syntax Checker
**** Install =flycheck-google-cpplint=
Add Google C++ Style checker for =flycheck= (Now deprecated, using local copy).
On Arch Linux, if using AUR package =cpplint=, need to modify command
in =flycheck-google-cpplint.el= to use =cpplint= instead of
=cppling.py=.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-google-cpplint
    :load-path "local/flycheck-google-cpplint/"
    :config
    (eval-after-load 'flycheck
      '(progn
         (require 'flycheck-google-cpplint)
         ;; Add Google C++ Style checker.
         ;; In default, syntax checked by Clang and Cppcheck.
         ;; Use Google Checker after errors are cleared
         (flycheck-add-next-checker 'c/c++-cppcheck
                                    '(error . c/c++-googlelint)))))
#+END_SRC

**** Set Checker Parameters
Set various parameters for the checker.
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(flycheck-googlelint-verbose "5")
   '(flycheck-googlelint-filter "-legal/copyright,-whitespace/braces")
   '(flycheck-googlelint-linelength "80"))
#+END_SRC

*** Set Clang Analyzer
**** Install =flycheck-clang-analyzer=
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-clang-analyzer
    :ensure t
    :init
    (with-eval-after-load 'flycheck
      (require 'flycheck-clang-analyzer)
      (flycheck-clang-analyzer-setup)))
#+END_SRC

** Yasnippet
YASnippet is a template system for Emacs. It allows you to type an
abbreviation and automatically expand it into function templates.

*** Installation
Install =yasnippet=. Load =yasnippet= when =yas-minor-mode= is called
and add the hook for =yas-minor-mode= for programming modes. Reload
the snippets on start up.
#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (use-package yasnippet
    :ensure t
    :commands (yas-minor-mode)
    :init (yas-global-mode)
    :config (yas-reload-all))
#+END_SRC

*** Install =yasnippet-snippets=
=yasnippet-snippets= is a collection of snippets for many langulages.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC

* Mode Specific
Settings specific to a mode or defines a new mode that often
specializes Emacs for a certain programming language.

** Auctex
=auctex= is an extensible package for writing and formatting TEX files
in GNU Emacs.

*** Installation
Need to use =defer= as =auctex.el= does not actually provide =auctex= feature.
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :defer t
    :ensure t)
#+END_SRC

*** Automatic Parsing
Enable =auctex= to automatically parse buffer information.
#+BEGIN_SRC emacs-lisp
  (setq TeX-parse-self t)
  (setq TeX-auto-save t)
  (setq TeX-save-query nil)
#+END_SRC

*** Master File Detection
Let =auctex= figure out the master file for TeX document spread over many files.
#+BEGIN_SRC emacs-lisp
  (setq-default TeX-master nil)
#+END_SRC

*** Spell Checking
Spell checking with =flyspell=.
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
#+END_SRC

*** Enable =reftex=
Turn on RefTeX Mode for all LaTeX files. This enables you to jump via table of contents.
The key to invoke this is ~C-c =~.
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
#+END_SRC

*** Enable =LaTeX-math-mode=
Enable LaTeX Math mode. This allows macro insertion following ~`~.
Not exactly useful since we already have =company=.
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
#+END_SRC

**** Auto-complete Sub/Superscripts
Insert braces after ~_~ or ~^~.
#+BEGIN_SRC emacs-lisp
  (setq TeX-electric-sub-and-superscript t)
#+END_SRC

** C/C++-mode
*** DISABLED Default Indention
Set default indention level to 4 and style to "linux"(do not indent braces).
#+BEGIN_SRC emacs-lisp
  (setq-default c-default-style "linux"
                c-basic-offset 4)
#+END_SRC

*** Google Style
Google's C/C++ style for c-mode.
**** Installation
#+BEGIN_SRC emacs-lisp
  (use-package google-c-style
    :ensure t
    :init
    (add-hook 'c-mode-common-hook 'google-set-c-style)
    (add-hook 'c-mode-common-hook 'google-make-newline-indent))
#+END_SRC

*** Treat =.h= as C++
Identify =.h= files as C++ files instead of C. To enable =c++-mode=
manually, type =M-x c\+\+-mode=.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+END_SRC

*** Clang-format
**** Installation
Install and set hot keys for formatting.
#+BEGIN_SRC emacs-lisp
  (use-package clang-format
    :ensure t
    :init
    (global-set-key (kbd "C-c i") 'clang-format-region)
    (global-set-key (kbd "C-c u") 'clang-format-buffer))
#+END_SRC

**** Set code style
Use Google's C++ style.
#+BEGIN_SRC emacs-lisp
  (custom-set-variables '(clang-format-style "Google"))
#+END_SRC

*** Doxygen Highlighting
Add highlighting for doxygen blocks.
#+BEGIN_SRC emacs-lisp
  (use-package highlight-doxygen
    :ensure t
    :init
    (add-hook 'c-mode-common-hook 'highlight-doxygen-mode))
#+END_SRC

** ESS
Use ESS (Emacs Speaks Statistics) for R and Julia support.
#+BEGIN_SRC emacs-lisp
  (use-package ess
    :ensure t
    :config
    ;; Add latex symbol completion in julia buffer mode as well.
    (add-hook 'ess-julia-mode-hook
          (lambda()
            (add-hook 'completion-at-point-functions
                      'ess-julia-latexsub-completion nil 'local)))
    (setq tab-always-indent 'complete))
#+END_SRC

*** Auto Format R Code
Use the =styler= R package to format buffer or region. Modeled after =yapfify=.
#+BEGIN_SRC emacs-lisp
  (defun user/r-format-call-bin (input-buffer output-buffer beginning end)
    "Format specified region in INPUT-BUFFER saving the output to OUTPUT-BUFFER.

  BEGINNING and END specify region to format."
    (with-current-buffer input-buffer
      (write-region beginning end "r-format-temp.R"))
    (call-process "R" nil nil nil "-e"
                  "library(styler);style_file(\"r-format-temp.R\")")
    (with-current-buffer output-buffer
      (insert-file-contents "r-format-temp.R" nil nil nil t))
    (with-current-buffer input-buffer
      (delete-region beginning end)
      (insert-buffer-substring output-buffer))
    (delete-file "r-format-temp.R"))

  (defun user/r-format-region (beginning end)
    "Try to r-format the current region.

  Output from R is stored in *r-format*."
    (interactive "r")
    (let* ((original-buffer (current-buffer))
           (original-point (point))  ; Because we are replacing text, save-excursion does not always work.
           (buffer-windows (get-buffer-window-list original-buffer nil t))
           (original-window-pos (mapcar 'window-start buffer-windows))
           (tmpbuf (generate-new-buffer "*r-format*"))
           (r-output (user/r-format-call-bin original-buffer tmpbuf beginning end)))
      (deactivate-mark)
      ;; Clean up tmpbuf
      (kill-buffer tmpbuf)
      ;; restore window to similar state
      (goto-char original-point)
      (mapcar* 'set-window-start buffer-windows original-window-pos)))

  (defun user/r-format-buffer ()
    "Format whole buffer."
    (interactive)
    (user/r-format-region (point-min) (point-max)))
#+END_SRC

Auto format on save for =ess-r-mode=.
#+BEGIN_SRC emacs-lisp
  (defun user/r-format-before-save ()
    "Runs r-format on current buffer if in ess-r-mode."
    (interactive)
    (when (eq major-mode 'ess-r-mode) (user/r-format-buffer)))

  (add-hook 'before-save-hook 'user/r-format-before-save)
#+END_SRC

** Lsp-mode
Use Language Server Protocol (LSP) for code completion, jump to definition, etc. Check [[https://github.com/emacs-lsp/lsp-mode#supported-languages][list of language servers]] and install needed ones.

*** Installation
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'lsp))
#+END_SRC

*** Flycheck Integration
Flycheck integration via =lsp-ui=.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :ensure t
    :init
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))
#+END_SRC

** Go-mode
Remember to set =$GOPATH= environment variable and add =$GOPATH/bin= to =$PATH=.

*** Go-mode
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
    (add-hook 'before-save-hook 'gofmt-before-save))
#+END_SRC

*** go-guru
Helpful code analysis tool, requires [[https://godoc.org/golang.org/x/tools/cmd/guru][golang.org/x/tools/cmd/guru]].

#+BEGIN_SRC emacs-lisp
  (use-package go-guru
    :ensure t)
#+END_SRC

** Julia-mode
*** Julia-mode
Official major mode for =julia=. This is required as a dependency for =ess-julia-mode=.
#+BEGIN_SRC emacs-lisp
  (use-package julia-mode
    :ensure t)
#+END_SRC

*** Flycheck Support
Flycheck support via =flycheck-julia=. This relies on [[https://github.com/tonyhffong/Lint.jl][Lint.jl]], which doesn't have a release yet for Julia 1.0. A work around is to give the repository URL to =Pkg= instead of the package name and fix 1.0 incompatibilities as they show up.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-julia
    :ensure t
    :init
    (add-hook 'ess-julia-mode-hook #'flycheck-julia-setup))
#+END_SRC

*** Better REPL
This is a minor mode for interacting with a Julia REPL running inside Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package julia-repl
    :ensure t
    :init
    (with-eval-after-load 'julia-mode
      (add-hook 'flycheck-mode-hook #'flycheck-julia-setup)))
#+END_SRC

** Org-mode
=org-mode= specific settings.

*** Global Keybindings
Set up keybindings for global access.
#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-switchb)
#+END_SRC

*** Formatting
**** Emphasis Boundary Regex
Allow non-ASCII characters (CJK characters for instance) to be boundaries for
Org emphasis markers. This need to happen before =org-mode= is loaded.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :init
    (setq org-emphasis-regexp-components
          (list (concat " \t('\"{"            "[:nonascii:]")  ;; prematch
                (concat "- \t.,:!?;'\")}\\["  "[:nonascii:]")  ;; postmatch
                " \t\r\n,\"'"                                  ;; border
                "."                                            ;; body-regexp
                1)))                                           ;; newline
#+END_SRC

**** DISABLED Set Link Format
Do not collapse the links.
#+BEGIN_SRC emacs-lisp
  (org-toggle-link-display)
#+END_SRC

**** Subtree Indention
Do not change text indention when promoting/demoting subtrees.
#+BEGIN_SRC emacs-lisp
  (setq org-adapt-indentation nil)
#+END_SRC

**** Truncate Lines by Default
Automatically enable truncated lines when starting =org-mode=.
#+BEGIN_SRC emacs-lisp
  (setq-default org-startup-truncated t)
#+END_SRC

**** DISABLED Turn Off =auto-fill=
Disable =auto-fill-mode= when in =org-mode=.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'turn-off-auto-fill)
#+END_SRC

**** Display Inline Images
Display inline images for =org-babel= execution results.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
(add-hook 'org-mode-hook 'org-display-inline-images)
#+END_SRC

**** Protect Folded Regions
Don't allow editing of folded regions
#+BEGIN_SRC emacs-lisp
  (setq org-catch-invisible-edits 'error)
#+END_SRC

**** DISABLED Enforce TODO Dependencies
Parent tasks should not be marked DONE until all subtasks are marked as DONE.
#+BEGIN_SRC emacs-lisp
  (setq org-enforce-todo-dependencies t)
#+END_SRC

**** Highlight LaTeX Related Syntax
Non-nil means highlight LaTeX related syntax in the buffer. When non nil, the value should be a list containing any of the following symbols:
- `latex' Highlight LaTeX snippets and environments.
- `script' Highlight subscript and superscript.
- `entities' Highlight entities.

#+BEGIN_SRC emacs-lisp
  (eval-after-load 'org
    '(setf org-highlight-latex-and-related '(latex)))
#+END_SRC

**** Default Image Size
In LaTeX export, the default image size is =width=.9\linewidth=, which is way too large. Setting this to empty allows images to retain it's original size.
#+BEGIN_SRC emacs-lisp
  (setq org-latex-image-default-width ".6\\linewidth")
#+END_SRC

*** Enable spell checking
Spell checking with =flyspell-mode=. Would need to install dictionary lib like =aspell= in base system.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

*** Enable Code Evaluation
Enable evaluation of various languages in org-mode.
#+BEGIN_SRC emacs-lisp
  (defvar user/org-babel-enabled-languages
    '(emacs-lisp
      python
      R
      org)
    "Extra languages user can execute in org-babel code blocks.")

  (org-babel-do-load-languages
   'org-babel-load-languages
   (mapcar
    (lambda (arg) (cons arg t))
    user/org-babel-enabled-languages))
#+END_SRC

There is no need to confirm execution for these languages.
#+BEGIN_SRC emacs-lisp
  (defvar user/org-babel-no-confirm-languages
    '(emacs-lisp
      python
      R
      latex-macros
      org)
    "Languages that do not user confirmation to execute")

  (setq org-confirm-babel-evaluate
        (lambda (lang body)
          (not (member lang
                       (mapcar (lambda (arg) (symbol-name arg))
                               user/org-babel-no-confirm-languages)))))
#+END_SRC

*** Exporter Backends
**** HTML
Do not export validation link.
#+BEGIN_SRC emacs-lisp
  (setq org-html-validation-link nil)
#+END_SRC

**** Markdown (Blackfriday)
An Org exporter backend that exports Org to Hugo-compatible Markdown
(Blackfriday) and generates the front-matter (in TOML or YAML format).

***** Installation
Enable =ox-hugo= as an option for exporting.
#+BEGIN_SRC emacs-lisp
  (use-package ox-hugo
    :ensure t
    :init (with-eval-after-load 'ox (require 'ox-hugo)))
#+END_SRC

***** Export Key Bindings
Wrap key bindings in =<kbd>=.
#+BEGIN_SRC emacs-lisp
  (setq org-hugo-use-code-for-kbd t)
#+END_SRC

**** Pandoc
This is another exporter for org-mode that translates Org-mode file to various
other formats via Pandoc.

***** Installation
#+BEGIN_SRC emacs-lisp
  (use-package ox-pandoc
    :ensure t)
#+END_SRC

**** Jupyter Notebook
Export backend for =.ipynb=. Package is not in MELPA yet, so using local copy. Repository is located [[https://github.com/jkitchin/ox-ipynb][here]].

#+BEGIN_SRC emacs-lisp
  (use-package ox-ipynb
    :load-path "local/ox-ipynb/")
#+END_SRC

Quick and easy hack to get python source blocks to work.
#+BEGIN_SRC emacs-lisp
  (setq ox-ipynb-kernelspecs
        '((ipython . (kernelspec . ((display_name . "Python 3")
                                    (language . "python")
                                    (name . "python3"))))
          (python . (kernelspec . ((display_name . "Python 3")
                                   (language . "python")
                                   (name . "python3"))))
          (R . (kernelspec . ((display_name . "R")
                              (language . "R")
                              (name . "ir"))))
          (julia . (kernelspec . ((display_name . "Julia 0.6.0")
                                  (language . "julia")
                                  (name . "julia-0.6"))))))

  (setq ox-ipynb-language-infos
        '((ipython . (language_info . ((codemirror_mode . ((name . ipython)
                                                           (version . 3)))
                                       (file_extension . ".py")
                                       (mimetype . "text/x-python")
                                       (name . "python")
                                       (nbconvert_exporter . "python")
                                       (pygments_lexer . "ipython3")
                                       (version . "3.5.2"))))
          (python . (language_info . ((codemirror_mode . ((name . ipython)
                                                          (version . 3)))
                                      (file_extension . ".py")
                                      (mimetype . "text/x-python")
                                      (name . "python")
                                      (nbconvert_exporter . "python")
                                      (pygments_lexer . "ipython3")
                                      (version . "3.5.2"))))
          (R . (language_info . ((codemirror_mode . "r")
                                 (file_extension . ".r")
                                 (mimetype . "text/x-r-source")
                                 (name . "R")
                                 (pygments_lexer . "r")
                                 (version . "3.3.2"))))
          (julia . (language_info . ((codemirror_mode . "julia")
                                     (file_extension . ".jl")
                                     (mimetype . "text/x-julia")
                                     (name . "julia")
                                     (pygments_lexer . "julia")
                                     (version . "0.6.0"))))))
#+END_SRC

**** LaTeX
***** LaTeX Macros
Support LaTeX macros in both LaTeX and HTML/MathJax export. We do this by adding
a dummy language to Babel. Idea comes form [[https://www.reddit.com/r/orgmode/comments/7u2n0h/tip_for_defining_latex_macros_for_use_in_both/][here]].
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-src-lang-modes '("latex-macros" . latex))

  (defvar org-babel-default-header-args:latex-macros
    '((:results . "raw")
      (:exports . "results")))

  (defun user/prefix-all-lines (pre body)
    (with-temp-buffer
      (insert body)
      (string-insert-rectangle (point-min) (point-max) pre)
      (buffer-string)))

  (defun org-babel-execute:latex-macros (body _params)
    (concat
     (user/prefix-all-lines "#+LATEX_HEADER: " body)
     "\n#+HTML_HEAD_EXTRA: <div style=\"display: none\"> \\(\n"
     (user/prefix-all-lines "#+HTML_HEAD_EXTRA: " body)
     "\n#+HTML_HEAD_EXTRA: \\)</div>\n"))
#+END_SRC

***** LaTeX Preview Scaling
Default size is a bit small. Also note that the =fullpage= package can cause preview images to become really tall. Use =dvisvgm= backend for clearer image.

#+BEGIN_SRC emacs-lisp
  (plist-put org-format-latex-options :scale 1.75)
  (setq org-latex-create-formula-image-program 'dvisvgm)
#+END_SRC

***** Code Listing
Use =minted= for code listings. Relies on =pygments= for syntax highlighting.
#+BEGIN_SRC emacs-lisp
  (setq org-latex-listings 'minted)
  (setq org-latex-minted-options
        '(("frame" "single")
          ("fontsize" "\\scriptsize")))
  (add-to-list 'org-latex-packages-alist '("" "minted" nil))
#+END_SRC

***** SVG Support
Use =svg= for supporting SVGs. Requires =inkscape= to be installed.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "svg" nil))
#+END_SRC

***** Shell Escape
This is required for =minted= and =svg= to work.
#+begin_src emacs-lisp :eval query-export :exports none :results silent
  (setq-local org-latex-pdf-process
              '("%latex -shell-escape -interaction nonstopmode -output-directory %o %f"
                "%latex -shell-escape -interaction nonstopmode -output-directory %o %f"
                "%latex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

** Python-mode
Enhancements to =python-mode=.

*** Anaconda Mode
Code navigation, documentation lookup and completion for Python.
#+BEGIN_SRC emacs-lisp
  (use-package anaconda-mode
    :ensure t
    :init
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode))
#+END_SRC

*** Auto Format
**** yapf
Use =yapf= to auto format python buffers on save.
#+BEGIN_SRC emacs-lisp
  (use-package yapfify
    :ensure t
    :init
    (add-hook 'python-mode-hook 'yapf-mode))
#+END_SRC

**** DISABLED pep8
Use =py-autopep8= to auto format python buffers on save.
#+BEGIN_SRC emacs-lisp
  (use-package py-autopep8
    :ensure t
    :init
    (add-hook 'python-mode-hook 'py-autopep8-enable-on-save))
#+END_SRC

*** Syntax Checking
**** Flycheck
By default =flycheck= only runs one available python checker.
#+BEGIN_SRC emacs-lisp
  (flycheck-add-next-checker 'python-flake8 'python-pylint)
#+END_SRC

**** DISABLED pycheckers
By default =flycheck= only runs one available python checker. Use
=flycheck-pycheckers=.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-pycheckers
    :ensure t
    :init
    (setq flycheck-pycheckers-checkers '(pylint flake8))
    (add-hook 'flycheck-mode-hook #'flycheck-pycheckers-setup))
#+END_SRC

*** DISABLED Python Interpretor
Use Jupyter console as default interpreter.
#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "jupyter"
        python-shell-interpreter-args "console --simple-prompt"
        python-shell-prompt-detect-failure-warning nil)
  (add-to-list 'python-shell-completion-native-disabled-interpreters
               "jupyter")
#+END_SRC

** Rust-mode
A compilation of settings for programming in rust. The recommended way to
install rust is via =rustup=. Remember to use =rustup add component= to install
=rust-fmt=, =rust-src=, and =rls=.

*** Rust-mode
Install =rust-mode=, use =rust-fmt= to format the code upon saving,
and automatically enable =rust-mode= for =*.rs= files.
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :init
    (setq rust-format-on-save t)
    (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode)))
#+END_SRC

*** Cargo Integration
A minor mode for =cargo=, the package manager for rust.
#+BEGIN_SRC emacs-lisp
  (use-package cargo
    :ensure t
    :init
    (add-hook 'rust-mode-hook 'cargo-minor-mode))
#+END_SRC

*** Flycheck Support
Better flycheck support via =flycheck-rust=.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-rust
    :ensure t
    :init
    (with-eval-after-load 'rust-mode
      (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))
#+END_SRC

*** Racer
Code completion utility for rust. Provides =company= integration.
#+BEGIN_SRC emacs-lisp
  (use-package racer
    :ensure t
    :init
    (add-hook 'rust-mode-hook #'racer-mode)
    (add-hook 'rust-mode-hook #'eldoc-mode))
#+END_SRC

* Enhancements
Packages providing enhancements to Emacs interface. Mostly simple plug-and-play
packages. Load enhancements in the end to prevent their dependencies getting
loaded prior to their own customization.

** Dashboard
An extensible Emacs startup screen showing you what's most important.

*** Installation
Change default startup screen with =dashboard=.
Customize =initial-buffer-choice= to affect new frames created by =emacsclient=.
Also refresh dashboard to ensure customizations take effect.
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda()
                                  (dashboard-refresh-buffer)
                                  (get-buffer "*dashboard*"))))
#+END_SRC

*** Customize Banner and Logo
Customize banner and logo.
#+BEGIN_SRC emacs-lisp
  (defvar user/dashboard-banner-logo-titles
    '("42"
      "9 MORE SEASONS UNTIL I GET THAT DIPPING SZECHUAN SAUCE!"
      "Eight-Megabytes-And-Constantly-Swapping"
      "Enter-Meta-Alt-Control-Shift"
      "Execute order 66."
      "Greetings from Emacs!"
      "Project-iM@CS"
      "Supervillain Repair & Restoration"
      "Weak emperors mean strong viceroys."
      "Wissen ist Nacht!"
      "Wubba Lubba Dub-Dub!"))
  (setq dashboard-banner-logo-title
        (elt user/dashboard-banner-logo-titles
             (random (length user/dashboard-banner-logo-titles))))
  (setq dashboard-startup-banner
        (expand-file-name "static/sxs.png" user-emacs-directory))
#+END_SRC

*** Customize Widgets
**** =dashboard-insert-configs=
Create widget to display important config files. Use ~c~ to jump to this section.
#+BEGIN_SRC emacs-lisp
  (defvar user/config-file-list
    (mapcar (lambda (arg) (expand-file-name arg user-emacs-directory))
            '("README.org"
              "init.el"
              "static/math_macros.sty")))

  (defun user/dashboard-insert-configs (list-size)
    "Add a list of config files."
    (dashboard-insert-section
     "Config Files:"
     user/config-file-list
     list-size
     "c"
     `(lambda (&rest ignore) (find-file-existing ,el))
     (abbreviate-file-name el)))

  (add-to-list 'dashboard-item-generators '(configs . user/dashboard-insert-configs))
#+END_SRC

**** =dashboard-insert-init-time=
Display initialization time.
#+BEGIN_SRC emacs-lisp
  (defun user/dashboard-insert-init-time (list-size)
     "Displays Emacs init time."
     (insert (format "[Started Emacs in %s.]" (emacs-init-time))))

  (add-to-list 'dashboard-item-generators '(init-time . user/dashboard-insert-init-time))
#+END_SRC

**** Apply All Widgets
Set items to display:
#+BEGIN_SRC emacs-lisp
  (setq dashboard-items '((recents  . 10)
                          (bookmarks . 5)
                          (projects . 8)
                          (agenda . 5)
  ;                        (registers . 5)
                          (configs)
                          (init-time)))
#+END_SRC

** HTML Export
Convert buffer text and decorations to HTML by =htmlize-buffer= so
that people can see what I see.
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
#+END_SRC

** Keybindings
*** IBuffer
Use =ibuffer= instead of =list-buffer=.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (autoload 'ibuffer "ibuffer" "List buffers." t)
#+END_SRC

** Keyfreq
Records command frequency. I am planning on adjusting my keyboard
layout with this information.
#+BEGIN_SRC emacs-lisp
    (use-package keyfreq
      :ensure t
      :init
      (keyfreq-mode 1)
      (keyfreq-autosave-mode 1))
#+END_SRC

** Magit
Install =magit= and bind =magit-status= to ~C-c g~.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :init
    (global-set-key (kbd "C-c g") 'magit-status))
#+END_SRC

** Projectile
Projectile is a project interaction library for Emacs. Its goal is to
provide a nice set of features operating on a project level without
introducing external dependencies(when feasible).

*** Installation
Install =projectile=.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1))
#+END_SRC

*** DISABLED Enable =helm= support
Since I use =helm=, I need to install additional support.
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :ensure t
    :init
    (setq projectile-completion-system 'helm)
    (helm-projectile-on))
#+END_SRC
